--[=[
    LuxUI - Enhanced Animated UI Library for Roblox
    Enhanced Features:
    - Smoother animations with spring physics
    - Shadow effects
    - Modern glass-morphism styling
    - Improved error handling
    - Gradient accents
    - Theme support
]=]

local LuxUI = {}
LuxUI.__index = LuxUI

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")

-- Configuration
local config = {
	ScriptName = "LuxUI Enhanced",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "LuxUI_Configs",
		FileName = "config.json"
	},
	Theme = "Dark",
	Flags = {}
}

-- Animation presets
local animations = {
	EasingStyles = {
		Linear = Enum.EasingStyle.Linear,
		Sine = Enum.EasingStyle.Sine,
		Back = Enum.EasingStyle.Back,
		Quad = Enum.EasingStyle.Quad,
		Quart = Enum.EasingStyle.Quart,
		Quint = Enum.EasingStyle.Quint,
		Bounce = Enum.EasingStyle.Bounce,
		Elastic = Enum.EasingStyle.Elastic,
		Spring = Enum.EasingStyle.Quad
	},
	EasingDirections = {
		In = Enum.EasingDirection.In,
		Out = Enum.EasingDirection.Out,
		InOut = Enum.EasingDirection.InOut
	}
}

-- Themes
local themes = {
	Dark = {
		Main = Color3.fromRGB(20, 20, 25),
		Secondary = Color3.fromRGB(30, 30, 35),
		Accent = Color3.fromRGB(0, 140, 255),
		AccentGradient = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 140, 255)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 200, 255))
		}),
		Text = Color3.fromRGB(255, 255, 255),
		TextDark = Color3.fromRGB(150, 150, 150),
		Shadow = Color3.fromRGB(0, 0, 0)
	},
	Light = {
		Main = Color3.fromRGB(240, 240, 245),
		Secondary = Color3.fromRGB(220, 220, 225),
		Accent = Color3.fromRGB(0, 120, 200),
		AccentGradient = ColorSequence.new({
			ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 120, 200)),
			ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 180, 220))
		}),
		Text = Color3.fromRGB(0, 0, 0),
		TextDark = Color3.fromRGB(100, 100, 100),
		Shadow = Color3.fromRGB(150, 150, 150)
	}
}

-- Create base UI function
function LuxUI.new(options)
	options = options or {}
	local self = setmetatable({}, LuxUI)

	-- Apply configuration
	self.ScriptName = options.ScriptName or config.ScriptName
	self.ConfigurationSaving = options.ConfigurationSaving or config.ConfigurationSaving
	self.AnimationSpeed = options.AnimationSpeed or 0.25
	self.Theme = options.Theme or config.Theme
	self.Colors = themes[self.Theme] or themes.Dark
	self.Flags = {}
	self.ActiveTweens = {}

	-- Create main UI elements
	local success, err = pcall(function()
		self:CreateUI()
	end)
	if not success then
		warn("Failed to create UI: " .. tostring(err))
	end

	-- Load configuration if enabled
	if self.ConfigurationSaving.Enabled then
		local success, err = pcall(function()
			self:LoadConfiguration()
		end)
		if not success then
			warn("Failed to load configuration: " .. tostring(err))
		end
	end

	return self
end

-- UI Creation Functions
function LuxUI:CreateUI()
	self.ScreenGui = Instance.new("ScreenGui")
	self.ScreenGui.Name = "LuxUI_" .. HttpService:GenerateGUID(false)
	self.ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
	self.ScreenGui.ResetOnSpawn = false
	self.ScreenGui.Parent = game:GetService("CoreGui")

	-- Create watermark and notification holder
	local success, err = pcall(function()
		self:CreateWatermark()
		self.NotificationHolder = Instance.new("Frame")
		self.NotificationHolder.Name = "NotificationHolder"
		self.NotificationHolder.BackgroundTransparency = 1
		self.NotificationHolder.Size = UDim2.new(1, 0, 1, 0)
		self.NotificationHolder.Parent = self.ScreenGui
	end)
	if not success then
		warn("Failed to create UI components: " .. tostring(err))
	end

	-- Create main window
	local success, err = pcall(function()
		self.MainWindow = self:CreateWindow({
			Title = self.ScriptName,
			Size = UDim2.new(0, 550, 0, 450),
			Position = UDim2.new(0.5, -275, 0.5, -225)
		})
	end)
	if not success then
		warn("Failed to create main window: " .. tostring(err))
	end
end

function LuxUI:CreateWatermark()
	self.Watermark = Instance.new("Frame")
	self.Watermark.Name = "Watermark"
	self.Watermark.BackgroundColor3 = self.Colors.Main
	self.Watermark.BackgroundTransparency = 0.3
	self.Watermark.Size = UDim2.new(0, 220, 0, 35)
	self.Watermark.Position = UDim2.new(0, 10, 0, 10)
	self.Watermark.Parent = self.ScreenGui

	-- Add shadow
	local shadow = Instance.new("ImageLabel")
	shadow.Name = "Shadow"
	shadow.Image = "rbxassetid://1316045217"
	shadow.ImageColor3 = self.Colors.Shadow
	shadow.ImageTransparency = 0.6
	shadow.BackgroundTransparency = 1
	shadow.Size = UDim2.new(1, 20, 1, 20)
	shadow.Position = UDim2.new(0, -10, 0, -10)
	shadow.ZIndex = -1
	shadow.Parent = self.Watermark

	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 8)
	corner.Parent = self.Watermark

	local stroke = Instance.new("UIStroke")
	stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	stroke.Color = self.Colors.Accent
	stroke.Thickness = 1.5
	stroke.Parent = self.Watermark

	local label = Instance.new("TextLabel")
	label.Name = "Label"
	label.Text = self.ScriptName
	label.Font = Enum.Font.GothamBlack
	label.TextColor3 = self.Colors.Text
	label.TextSize = 16
	label.BackgroundTransparency = 1
	label.Size = UDim2.new(1, -15, 1, 0)
	label.Position = UDim2.new(0, 15, 0, 0)
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.Parent = self.Watermark

	local fpsLabel = Instance.new("TextLabel")
	fpsLabel.Name = "FPS"
	fpsLabel.Text = "0 FPS"
	fpsLabel.Font = Enum.Font.GothamSemibold
	fpsLabel.TextColor3 = self.Colors.TextDark
	fpsLabel.TextSize = 14
	fpsLabel.BackgroundTransparency = 1
	fpsLabel.Size = UDim2.new(0, 60, 1, 0)
	fpsLabel.Position = UDim2.new(1, -60, 0, 0)
	fpsLabel.TextXAlignment = Enum.TextXAlignment.Right
	fpsLabel.Parent = self.Watermark

	-- FPS counter with smoother updates
	local lastTick = tick()
	local frames = 0
	local connection
	local success, err = pcall(function()
		connection = RunService.Heartbeat:Connect(function()
			frames = frames + 1
			if tick() - lastTick >= 1 then
				fpsLabel.Text = string.format("%d FPS", math.floor(frames))
				frames = 0
				lastTick = tick()
			end
		end)
	end)
	if not success then
		warn("Failed to set up FPS counter: " .. tostring(err))
	end

	-- Cleanup connection
	self.Watermark.AncestryChanged:Connect(function()
		if not self.Watermark:IsDescendantOf(game) then
			if connection then
				connection:Disconnect()
			end
		end
	end)

	-- Make draggable
	local success, err = pcall(function()
		self:MakeDraggable(self.Watermark)
	end)
	if not success then
		warn("Failed to make watermark draggable: " .. tostring(err))
	end
end

function LuxUI:CreateWindow(options)
	options = options or {}
	local window = {}

	-- Create main frame
	window.Main = Instance.new("Frame")
	window.Main.Name = "Window"
	window.Main.BackgroundColor3 = self.Colors.Main
	window.Main.BackgroundTransparency = 0.1
	window.Main.Size = options.Size or UDim2.new(0, 550, 0, 450)
	window.Main.Position = options.Position or UDim2.new(0.5, -275, 0.5, -225)
	window.Main.Parent = self.ScreenGui

	-- Add shadow
	local shadow = Instance.new("ImageLabel")
	shadow.Name = "Shadow"
	shadow.Image = "rbxassetid://1316045217"
	shadow.ImageColor3 = self.Colors.Shadow
	shadow.ImageTransparency = 0.5
	shadow.BackgroundTransparency = 1
	shadow.Size = UDim2.new(1, 30, 1, 30)
	shadow.Position = UDim2.new(0, -15, 0, -15)
	shadow.ZIndex = -1
	shadow.Parent = window.Main

	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 8)
	corner.Parent = window.Main

	local stroke = Instance.new("UIStroke")
	stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	stroke.Color = self.Colors.Accent
	stroke.Thickness = 1.5
	stroke.Parent = window.Main

	-- Create title bar
	window.TitleBar = Instance.new("Frame")
	window.TitleBar.Name = "TitleBar"
	window.TitleBar.BackgroundColor3 = self.Colors.Secondary
	window.TitleBar.BackgroundTransparency = 0.2
	window.TitleBar.Size = UDim2.new(1, 0, 0, 35)
	window.TitleBar.Parent = window.Main

	local topCorner = Instance.new("UICorner")
	topCorner.CornerRadius = UDim.new(0, 8)
	topCorner.Parent = window.TitleBar

	local title = Instance.new("TextLabel")
	title.Name = "Title"
	title.Text = options.Title or "LuxUI Window"
	title.Font = Enum.Font.GothamBlack
	title.TextColor3 = self.Colors.Text
	title.TextSize = 16
	title.BackgroundTransparency = 1
	title.Size = UDim2.new(1, -40, 1, 0)
	title.Position = UDim2.new(0, 15, 0, 0)
	title.TextXAlignment = Enum.TextXAlignment.Left
	title.Parent = window.TitleBar

	local close = Instance.new("TextButton")
	close.Name = "Close"
	close.Text = "Ã—"
	close.Font = Enum.Font.GothamBold
	close.TextColor3 = self.Colors.Text
	close.TextSize = 18
	close.BackgroundTransparency = 1
	close.Size = UDim2.new(0, 35, 1, 0)
	close.Position = UDim2.new(1, -35, 0, 0)
	close.Parent = window.TitleBar

	-- Close animation
	close.MouseButton1Click:Connect(function()
		if window.Main then
			self:Tween(window.Main, {
				Size = UDim2.new(0, 0, 0, 0),
				BackgroundTransparency = 1
			}, 0.3, function()
				if window.Main then
					window.Main.Visible = false
				end
			end)
		end
	end)

	-- Create tab holder
	window.TabHolder = Instance.new("Frame")
	window.TabHolder.Name = "TabHolder"
	window.TabHolder.BackgroundColor3 = self.Colors.Secondary
	window.TabHolder.BackgroundTransparency = 0.2
	window.TabHolder.Size = UDim2.new(0, 140, 1, -35)
	window.TabHolder.Position = UDim2.new(0, 0, 0, 35)
	window.TabHolder.Parent = window.Main

	local tabList = Instance.new("UIListLayout")
	tabList.Name = "TabList"
	tabList.Padding = UDim.new(0, 8)
	tabList.SortOrder = Enum.SortOrder.LayoutOrder
	tabList.Parent = window.TabHolder

	-- Create content frame
	window.Content = Instance.new("Frame")
	window.Content.Name = "Content"
	window.Content.BackgroundColor3 = self.Colors.Main
	window.Content.BackgroundTransparency = 0.1
	window.Content.Size = UDim2.new(1, -140, 1, -35)
	window.Content.Position = UDim2.new(0, 140, 0, 35)
	window.Content.Parent = window.Main

	local contentCorner = Instance.new("UICorner")
	contentCorner.CornerRadius = UDim.new(0, 8)
	contentCorner.Parent = window.Content

	-- Make draggable
	local success, err = pcall(function()
		self:MakeDraggable(window.Main, window.TitleBar)
	end)
	if not success then
		warn("Failed to make window draggable: " .. tostring(err))
	end

	-- Window methods
	function window:AddTab(name)
		local tab = {}

		-- Create tab button
		tab.Button = Instance.new("TextButton")
		tab.Button.Name = name
		tab.Button.Text = name
		tab.Button.Font = Enum.Font.GothamSemibold
		tab.Button.TextColor3 = self.Colors.Text
		tab.Button.TextSize = 15
		tab.Button.BackgroundColor3 = self.Colors.Main
		tab.Button.BackgroundTransparency = 0.2
		tab.Button.Size = UDim2.new(1, -10, 0, 35)
		tab.Button.Position = UDim2.new(0, 5, 0, 5)
		tab.Button.Parent = window.TabHolder

		local corner = Instance.new("UICorner")
		corner.CornerRadius = UDim.new(0, 8)
		corner.Parent = tab.Button

		local gradient = Instance.new("UIGradient")
		gradient.Color = self.Colors.AccentGradient
		gradient.Enabled = false
		gradient.Parent = tab.Button

		-- Create tab content
		tab.Content = Instance.new("Frame")
		tab.Content.Name = name
		tab.Content.BackgroundTransparency = 1
		tab.Content.Size = UDim2.new(1, 0, 1, 0)
		tab.Content.Visible = false
		tab.Content.Parent = window.Content

		local tabList = Instance.new("UIListLayout")
		tabList.Name = "TabList"
		tabList.Padding = UDim.new(0, 12)
		tabList.Parent = tab.Content

		-- Tab selection logic
		tab.Button.MouseButton1Click:Connect(function()
			for _, otherTab in pairs(window.Tabs or {}) do
				if otherTab.Content and otherTab.Button then
					otherTab.Content.Visible = false
					self:Tween(otherTab.Button, {
						BackgroundColor3 = self.Colors.Main,
						BackgroundTransparency = 0.2
					}, 0.2)
					local otherGradient = otherTab.Button:FindFirstChild("UIGradient")
					if otherGradient then
						otherGradient.Enabled = false
					end
				end
			end

			if tab.Content and tab.Button then
				tab.Content.Visible = true
				self:Tween(tab.Button, {
					BackgroundColor3 = self.Colors.Accent,
					BackgroundTransparency = 0
				}, 0.2)
				gradient.Enabled = true
			end
		end)

		-- Tab methods
		function tab:AddSection(title)
			local section = {}

			section.Main = Instance.new("Frame")
			section.Main.Name = title
			section.Main.BackgroundColor3 = self.Colors.Secondary
			section.Main.BackgroundTransparency = 0.2
			section.Main.Size = UDim2.new(1, {#content} -20, 0, 0)
			section.Main.Position = UDim2.new(0, 10, 0, 10)
			section.Main.Parent = tab.Content

			local corner = Instance.new("UICorner")
			corner.CornerRadius = UDim.new(0, 8)
			corner.Parent = section.Main

			local stroke = Instance.new("UIStroke")
			stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
			stroke.Color = self.Colors.Accent
			stroke.Thickness = 1.5
			stroke.Parent = section.Main

			section.Title = Instance.new("TextLabel")
			section.Title.Name = "Title"
			section.Title.Text = title
			section.Title.Font = Enum.Font.GothamBlack
			section.Title.TextColor3 = self.Colors.Text
			section.Title.TextSize = 16
			section.Title.BackgroundTransparency = 1
			section.Title.Size = UDim2.new(1, -15, 0, 35)
			section.Title.Position = UDim2.new(0, 15, 0, 0)
			section.Title.TextXAlignment = Enum.TextXAlignment.Left
			section.Title.Parent = section.Main

			section.Content = Instance.new("Frame")
			section.Content.Name = "Content"
			section.Content.BackgroundTransparency = 1
			section.Content.Size = UDim2.new(1, 0, 1, -45)
			section.Content.Position = UDim2.new(0, 0, 0, 45)
			section.Content.Parent = section.Main

			local listLayout = Instance.new("UIListLayout")
			listLayout.Name = "ListLayout"
			listLayout.Padding = UDim.new(0, 12)
			listLayout.SortOrder = Enum.SortOrder.LayoutOrder
			listLayout.Parent = section.Content

			listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
				if section.Main then
					section.Main.Size = UDim2.new(1, -20, 0, listLayout.AbsoluteContentSize.Y + 60)
				end
			end)

			function section:AddButton(options)
				options = options or {}
				local button = Instance.new("TextButton")
				button.Name = options.Name or "Button"
				button.Text = options.Name or "Button"
				button.Font = Enum.Font.GothamSemibold
				button.TextColor3 = self.Colors.Text
				button.TextSize = 15
				button.BackgroundColor3 = self.Colors.Main
				button.BackgroundTransparency = 0.2
				button.AutoButtonColor = false
				button.Size = UDim2.new(1, -20, 0, 35)
				button.Position = UDim2.new(0, 10, 0, 0)
				button.Parent = section.Content

				local corner = Instance.new("UICorner")
				corner.CornerRadius = UDim.new(0, 8)
				corner.Parent = button

				local stroke = Instance.new("UIStroke")
				stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
				stroke.Color = self.Colors.Accent
				stroke.Thickness = 1.5
				stroke.Parent = button

				local gradient = Instance.new("UIGradient")
				gradient.Color = self.Colors.AccentGradient
				gradient.Enabled = false
				gradient.Parent = button

				button.MouseEnter:Connect(function()
					if button then
						self:Tween(button, {
							BackgroundColor3 = self.Colors.Accent,
							BackgroundTransparency = 0
						}, 0.2)
						gradient.Enabled = true
					end
				end)

				button.MouseLeave:Connect(function()
					if button then
						self:Tween(button, {
							BackgroundColor3 = self.Colors.Main,
							BackgroundTransparency = 0.2
						}, 0.2)
						gradient.Enabled = false
					end
				end)

				button.MouseButton1Click:Connect(function()
					if options.Callback then
						local success, err = pcall(options.Callback)
						if not success then
							warn("Button callback error: " .. tostring(err))
						end
					end
				end)

				return button
			end

			function section:AddToggle(options)
				options = options or {}
				local toggle = {}
				toggle.Value = options.Default or false

				toggle.Main = Instance.new("Frame")
				toggle.Main.Name = options.Name or "Toggle"
				toggle.Main.BackgroundTransparency = 1
				toggle.Main.Size = UDim2.new(1, -20, 0, 35)
				toggle.Main.Position = UDim2.new(0, 10, 0, 0)
				toggle.Main.Parent = section.Content

				toggle.Label = Instance.new("TextLabel")
				toggle.Label.Name = "Label"
				toggle.Label.Text = options.Name or "Toggle"
				toggle.Label.Font = Enum.Font.GothamSemibold
				toggle.Label.TextColor3 = self.Colors.Text
				toggle.Label.TextSize = 15
				toggle.Label.BackgroundTransparency = 1
				toggle.Label.Size = UDim2.new(0.7, 0, 1, 0)
				toggle.Label.Position = UDim2.new(0, 0, 0, 0)
				toggle.Label.TextXAlignment = Enum.TextXAlignment.Left
				toggle.Label.Parent = toggle.Main

				toggle.Button = Instance.new("TextButton")
				toggle.Button.Name = "Button"
				toggle.Button.Text = ""
				toggle.Button.BackgroundColor3 = self.Colors.Main
				toggle.Button.BackgroundTransparency = 0.2
				toggle.Button.AutoButtonColor = false
				toggle.Button.Size = UDim2.new(0, 55, 0, 28)
				toggle.Button.Position = UDim2.new(1, -55, 0.5, -14)
				toggle.Button.Parent = toggle.Main

				local corner = Instance.new("UICorner")
				corner.CornerRadius = UDim.new(0, 14)
				corner.Parent = toggle.Button

				local stroke = Instance.new("UIStroke")
				stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
				stroke.Color = self.Colors.Accent
				stroke.Thickness = 1.5
				stroke.Parent = toggle.Button

				toggle.Indicator = Instance.new("Frame")
				toggle.Indicator.Name = "Indicator"
				toggle.Indicator.BackgroundColor3 = self.Colors.Text
				toggle.Indicator.Size = UDim2.new(0, 24, 0, 24)
				toggle.Indicator.Position = UDim2.new(0, 2, 0.5, -12)
				toggle.Indicator.Parent = toggle.Button

				local indicatorCorner = Instance.new("UICorner")
				indicatorCorner.CornerRadius = UDim.new(0, 12)
				indicatorCorner.Parent = toggle.Indicator

				local function update()
					if not (toggle.Button and toggle.Indicator) then return end
					if toggle.Value then
						self:Tween(toggle.Indicator, {Position = UDim2.new(1, -26, 0.5, -12)}, 0.2)
						self:Tween(toggle.Button, {
							BackgroundColor3 = self.Colors.Accent,
							BackgroundTransparency = 0
						}, 0.2)
					else
						self:Tween(toggle.Indicator, {Position = UDim2.new(0, 2, 0.5, -12)}, 0.2)
						self:Tween(toggle.Button, {
							BackgroundColor3 = self.Colors.Main,
							BackgroundTransparency = 0.2
						}, 0.2)
					end
				end

				update()

				toggle.Button.MouseButton1Click:Connect(function()
					toggle.Value = not toggle.Value
					update()

					if options.Callback then
						local success, err = pcall(function()
							options.Callback(toggle.Value)
						end)
						if not success then
							warn("Toggle callback error: " .. tostring(err))
						end
					end

					if options.Flag then
						self.Flags[options.Flag] = toggle.Value
					end
				end)

				if options.Flag then
					self.Flags[options.Flag] = toggle.Value
				end

				return toggle
			end

			function section:AddSlider(options)
				options = options or {}
				local slider = {}
				slider.Value = options.Default or options.Min or 0
				slider.Min = options.Min or 0
				slider.Max = options.Max or 100
				slider.Precision = options.Precision or 1

				slider.Main = Instance.new("Frame")
				slider.Main.Name = options.Name or "Slider"
				slider.Main.BackgroundTransparency = 1
				slider.Main.Size = UDim2.new(1, -20, 0, 55)
				slider.Main.Position = UDim2.new(0, 10, 0, 0)
				slider.Main.Parent = section.Content

				slider.Label = Instance.new("TextLabel")
				slider.Label.Name = "Label"
				slider.Label.Text = options.Name or "Slider"
				slider.Label.Font = Enum.Font.GothamSemibold
				slider.Label.TextColor3 = self.Colors.Text
				slider.Label.TextSize = 15
				slider.Label.BackgroundTransparency = 1
				slider.Label.Size = UDim2.new(1, 0, 0, 25)
				slider.Label.Position = UDim2.new(0, 0, 0, 0)
				slider.Label.TextXAlignment = Enum.TextXAlignment.Left
				slider.Label.Parent = slider.Main

				slider.ValueLabel = Instance.new("TextLabel")
				slider.ValueLabel.Name = "ValueLabel"
				slider.ValueLabel.Text = tostring(slider.Value)
				slider.ValueLabel.Font = Enum.Font.GothamSemibold
				slider.ValueLabel.TextColor3 = self.Colors.TextDark
				slider.ValueLabel.TextSize = 14
				slider.ValueLabel.BackgroundTransparency = 1
				slider.ValueLabel.Size = UDim2.new(0, 100, 0, 25)
				slider.ValueLabel.Position = UDim2.new(1, -100, 0, 0)
				slider.ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
				slider.ValueLabel.Parent = slider.Main

				slider.Track = Instance.new("Frame")
				slider.Track.Name = "Track"
				slider.Track.BackgroundColor3 = self.Colors.Main
				slider.Track.BackgroundTransparency = 0.2
				slider.Track.Size = UDim2.new(1, 0, 0, 6)
				slider.Track.Position = UDim2.new(0, 0, 1, -18)
				slider.Track.Parent = slider.Main

				local trackCorner = Instance.new("UICorner")
				trackCorner.CornerRadius = UDim.new(0, 3)
				trackCorner.Parent = slider.Track

				local trackStroke = Instance.new("UIStroke")
				trackStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
				trackStroke.Color = self.Colors.Accent
				trackStroke.Thickness = 1.5
				trackStroke.Parent = slider.Track

				slider.Fill = Instance.new("Frame")
				slider.Fill.Name = "Fill"
				slider.Fill.BackgroundColor3 = self.Colors.Accent
				slider.Fill.Size = UDim2.new(0, 0, 1, 0)
				slider.Fill.Position = UDim2.new(0, 0, 0, 0)
				slider.Fill.Parent = slider.Track

				local fillCorner = Instance.new("UICorner")
				fillCorner.CornerRadius = UDim.new(0, 3)
				fillCorner.Parent = slider.Fill

				local fillGradient = Instance.new("UIGradient")
				fillGradient.Color = self.Colors.AccentGradient
				fillGradient.Parent = slider.Fill

				slider.Thumb = Instance.new("Frame")
				slider.Thumb.Name = "Thumb"
				slider.Thumb.BackgroundColor3 = self.Colors.Text
				slider.Thumb.Size = UDim2.new(0, 16, 0, 16)
				slider.Thumb.Position = UDim2.new(0, -8, 0.5, -8)
				slider.Thumb.Parent = slider.Track

				local thumbCorner = Instance.new("UICorner")
				thumbCorner.CornerRadius = UDim.new(0, 8)
				thumbCorner.Parent = slider.Thumb

				local function update()
					if not (slider.Fill and slider.Thumb and slider.ValueLabel) then return end
					local percent = (slider.Value - slider.Min) / (slider.Max - slider.Min)
					slider.Fill.Size = UDim2.new(percent, 0, 1, 0)
					slider.Thumb.Position = UDim2.new(percent, -8, 0.5, -8)
					slider.ValueLabel.Text = string.format("%.2f", slider.Value)

					if options.Callback then
						local success, err = pcall(function()
							options.Callback(slider.Value)
						end)
						if not success then
							warn("Slider callback error: " .. tostring(err))
						end
					end

					if options.Flag then
						self.Flags[options.Flag] = slider.Value
					end
				end

				update()

				local dragging = false
				slider.Track.InputBegan:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						dragging = true
						local percent = (input.Position.X - slider.Track.AbsolutePosition.X) / slider.Track.AbsoluteSize.X
						percent = math.clamp(percent, 0, 1)
						slider.Value = math.floor((slider.Min + (slider.Max - slider.Min) * percent) * (10 ^ slider.Precision)) / (10 ^ slider.Precision)
						update()
					end
				end)

				UserInputService.InputEnded:Connect(function(input)
					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						dragging = false
					end
				end)

				UserInputService.InputChanged:Connect(function(input)
					if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
						local percent = (input.Position.X - slider.Track.AbsolutePosition.X) / slider.Track.AbsoluteSize.X
						percent = math.clamp(percent, 0, 1)
						slider.Value = math.floor((slider.Min + (slider.Max - slider.Min) * percent) * (10 ^ slider.Precision)) / (10 ^ slider.Precision)
						update()
					end
				end)

				if options.Flag then
					self.Flags[options.Flag] = slider.Value
				end

				return slider
			end

			function section:AddDropdown(options)
				options = options or {}
				local dropdown = {}
				dropdown.Value = options.Default or nil
				dropdown.Options = options.Options or {}
				dropdown.Open = false

				dropdown.Main = Instance.new("Frame")
				dropdown.Main.Name = options.Name or "Dropdown"
				dropdown.Main.BackgroundTransparency = 1
				dropdown.Main.Size = UDim2.new(1, -20, 0, 35)
				dropdown.Main.Position = UDim2.new(0, 10, 0, 0)
				dropdown.Main.ClipsDescendants = true
				dropdown.Main.Parent = section.Content

				dropdown.Button = Instance.new("TextButton")
				dropdown.Button.Name = "Button"
				dropdown.Button.Text = ""
				dropdown.Button.BackgroundColor3 = self.Colors.Main
				dropdown.Button.BackgroundTransparency = 0.2
				dropdown.Button.AutoButtonColor = false
				dropdown.Button.Size = UDim2.new(1, 0, 0, 35)
				dropdown.Button.Position = UDim2.new(0, 0, 0, 0)
				dropdown.Button.Parent = dropdown.Main

				local buttonCorner = Instance.new("UICorner")
				buttonCorner.CornerRadius = UDim.new(0, 8)
				buttonCorner.Parent = dropdown.Button

				local buttonStroke = Instance.new("UIStroke")
				buttonStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
				buttonStroke.Color = self.Colors.Accent
				buttonStroke.Thickness = 1.5
				buttonStroke.Parent = dropdown.Button

				dropdown.Label = Instance.new("TextLabel")
				dropdown.Label.Name = "Label"
				dropdown.Label.Text = options.Name or "Dropdown"
				dropdown.Label.Font = Enum.Font.GothamSemibold
				dropdown.Label.TextColor3 = self.Colors.Text
				dropdown.Label.TextSize = 15
				dropdown.Label.BackgroundTransparency = 1
				dropdown.Label.Size = UDim2.new(0.7, 0, 1, 0)
				dropdown.Label.Position = UDim2.new(0, 15, 0, 0)
				dropdown.Label.TextXAlignment = Enum.TextXAlignment.Left
				dropdown.Label.Parent = dropdown.Button

				dropdown.ValueLabel = Instance.new("TextLabel")
				dropdown.ValueLabel.Name = "ValueLabel"
				dropdown.ValueLabel.Text = dropdown.Value or "None"
				dropdown.ValueLabel.Font = Enum.Font.GothamSemibold
				dropdown.ValueLabel.TextColor3 = self.Colors.TextDark
				dropdown.ValueLabel.TextSize = 14
				dropdown.ValueLabel.BackgroundTransparency = 1
				dropdown.ValueLabel.Size = UDim2.new(0.3, -15, 1, 0)
				dropdown.ValueLabel.Position = UDim2.new(0.7, 0, 0, 0)
				dropdown.ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
				dropdown.ValueLabel.Parent = dropdown.Button

				dropdown.Icon = Instance.new("ImageLabel")
				dropdown.Icon.Name = "Icon"
				dropdown.Icon.Image = "rbxassetid://6031094667"
				dropdown.Icon.ImageColor3 = self.Colors.TextDark
				dropdown.Icon.BackgroundTransparency = 1
				dropdown.Icon.Size = UDim2.new(0, 22, 0, 22)
				dropdown.Icon.Position = UDim2.new(1, -30, 0.5, -11)
				dropdown.Icon.Parent = dropdown.Button

				dropdown.List = Instance.new("Frame")
				dropdown.List.Name = "List"
				dropdown.List.BackgroundColor3 = self.Colors.Secondary
				dropdown.List.BackgroundTransparency = 0.2
				dropdown.List.Size = UDim2.new(1, 0, 0, 0)
				dropdown.List.Position = UDim2.new(0, 0, 0, 40)
				dropdown.List.Visible = false
				dropdown.List.Parent = dropdown.Main

				local listCorner = Instance.new("UICorner")
				listCorner.CornerRadius = UDim.new(0, 8)
				listCorner.Parent = dropdown.List

				local listStroke = Instance.new("UIStroke")
				listStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
				listStroke.Color = self.Colors.Accent
				listStroke.Thickness = 1.5
				listStroke.Parent = dropdown.List

				local listLayout = Instance.new("UIListLayout")
				listLayout.Name = "ListLayout"
				listLayout.Padding = UDim.new(0, 8)
				listLayout.SortOrder = Enum.SortOrder.LayoutOrder
				listLayout.Parent = dropdown.List

				local function createOptions()
					for _, child in ipairs(dropdown.List:GetChildren()) do
						if child:IsA("TextButton") then
							child:Destroy()
						end
					end

					for _, option in ipairs(dropdown.Options) do
						local optionButton = Instance.new("TextButton")
						optionButton.Name = option
						optionButton.Text = option
						optionButton.Font = Enum.Font.GothamSemibold
						optionButton.TextColor3 = self.Colors.Text
						optionButton.TextSize = 15
						optionButton.BackgroundColor3 = self.Colors.Main
						optionButton.BackgroundTransparency = 0.2
						optionButton.AutoButtonColor = false
						optionButton.Size = UDim2.new(1, -10, 0, 35)
						optionButton.Position = UDim2.new(0, 5, 0, 5)
						optionButton.LayoutOrder = _
						optionButton.Parent = dropdown.List

						local optionCorner = Instance.new("UICorner")
						optionCorner.CornerRadius = UDim.new(0, 8)
						optionCorner.Parent = optionButton

						local optionGradient = Instance.new("UIGradient")
						optionGradient.Color = self.Colors.AccentGradient
						optionGradient.Enabled = false
						optionGradient.Parent = optionButton

						optionButton.MouseEnter:Connect(function()
							if optionButton then
								self:Tween(optionButton, {
									BackgroundColor3 = self.Colors.Accent,
									BackgroundTransparency = 0
								}, 0.2)
								optionGradient.Enabled = true
							end
						end)

						optionButton.MouseLeave:Connect(function()
							if optionButton then
								self:Tween(optionButton, {
									BackgroundColor3 = self.Colors.Main,
									BackgroundTransparency = 0.2
								}, 0.2)
								optionGradient.Enabled = false
							end
						end)

						optionButton.MouseButton1Click:Connect(function()
							if not dropdown.List then return end
							dropdown.Value = option
							dropdown.ValueLabel.Text = option
							dropdown.Open = false

							self:Tween(dropdown.List, {Size = UDim2.new(1, 0, 0, 0)}, 0.2, function()
								if dropdown.List then
									dropdown.List.Visible = false
								end
							end)

							self:Tween(dropdown.Icon, {Rotation = 0}, 0.2)

							if options.Callback then
								local success, err = pcall(function()
									options.Callback(option)
								end)
								if not success then
									warn("Dropdown callback error: " .. tostring(err))
								end
							end

							if options.Flag then
								self.Flags[options.Flag] = option
							end
						end)
					end

					local listHeight = #dropdown.Options * 43 + 8
					dropdown.List.Size = UDim2.new(1, 0, 0, listHeight)
				end

				createOptions()

				dropdown.Button.MouseButton1Click:Connect(function()
					if not (dropdown.List and dropdown.Icon) then return end
					dropdown.Open = not dropdown.Open

					if dropdown.Open then
						dropdown.List.Visible = true
						self:Tween(dropdown.List, {Size = UDim2.new(1, 0, 0, #dropdown.Options * 43 + 8)}, 0.2)
						self:Tween(dropdown.Icon, {Rotation = 180}, 0.2)
					else
						self:Tween(dropdown.List, {Size = UDim2.new(1, 0, 0, 0)}, 0.2, function()
							if dropdown.List then
								dropdown.List.Visible = false
							end
						end)
						self:Tween(dropdown.Icon, {Rotation = 0}, 0.2)
					end
				end)

				local clickConnection
				clickConnection = UserInputService.InputBegan:Connect(function(input)
					if dropdown.Open and input.UserInputType == Enum.UserInputType.MouseButton1 then
						local mousePos = input.Position
						local absolutePos = dropdown.Main.AbsolutePosition
						local absoluteSize = dropdown.Main.AbsoluteSize

						if not (mousePos.X >= absolutePos.X and mousePos.X <= absolutePos.X + absoluteSize.X and
							mousePos.Y >= absolutePos.Y and mousePos.Y <= absolutePos.Y + absoluteSize.Y) then
							dropdown.Open = false
							if dropdown.List and dropdown.Icon then
								self:Tween(dropdown.List, {Size = UDim2.new(1, 0, 0, 0)}, 0.2, function()
									if dropdown.List then
										dropdown.List.Visible = false
									end
								end)
								self:Tween(dropdown.Icon, {Rotation = 0}, 0.2)
							end
						end
					end
				end)

				dropdown.Main.AncestryChanged:Connect(function()
					if not dropdown.Main:IsDescendantOf(game) then
						if clickConnection then
							clickConnection:Disconnect()
						end
					end
				end)

				if options.Flag then
					self.Flags[options.Flag] = dropdown.Value
				end

				function dropdown:SetOptions(newOptions)
					dropdown.Options = newOptions
					createOptions()
				end

				function dropdown:SetValue(newValue)
					if table.find(dropdown.Options, newValue) then
						dropdown.Value = newValue
						dropdown.ValueLabel.Text = newValue

						if options.Callback then
							local success, err = pcall(function()
								options.Callback(newValue)
							end)
							if not success then
								warn("Dropdown set value error: " .. tostring(err))
							end
						end

						if options.Flag then
							self.Flags[options.Flag] = newValue
						end
					end
				end

				return dropdown
			end

			function section:AddKeybind(options)
				options = options or {}
				local keybind = {}
				keybind.Value = options.Default or Enum.KeyCode.Unknown
				keybind.Listening = false

				keybind.Main = Instance.new("Frame")
				keybind.Main.Name = options.Name or "Keybind"
				keybind.Main.BackgroundTransparency = 1
				keybind.Main.Size = UDim2.new(1, -20, 0, 35)
				keybind.Main.Position = UDim2.new(0, 10, 0, 0)
				keybind.Main.Parent = section.Content

				keybind.Label = Instance.new("TextLabel")
				keybind.Label.Name = "Label"
				keybind.Label.Text = options.Name or "Keybind"
				keybind.Label.Font = Enum.Font.GothamSemibold
				keybind.Label.TextColor3 = self.Colors.Text
				keybind.Label.TextSize = 15
				keybind.Label.BackgroundTransparency = 1
				keybind.Label.Size = UDim2.new(0.7, 0, 1, 0)
				keybind.Label.Position = UDim2.new(0, 0, 0, 0)
				keybind.Label.TextXAlignment = Enum.TextXAlignment.Left
				keybind.Label.Parent = keybind.Main

				keybind.Button = Instance.new("TextButton")
				keybind.Button.Name = "Button"
				keybind.Button.Text = keybind.Value.Name or "None"
				keybind.Button.Font = Enum.Font.GothamSemibold
				keybind.Button.TextColor3 = self.Colors.Text
				keybind.Button.TextSize = 14
				keybind.Button.BackgroundColor3 = self.Colors.Main
				keybind.Button.BackgroundTransparency = 0.2
				keybind.Button.AutoButtonColor = false
				keybind.Button.Size = UDim2.new(0, 100, 0, 28)
				keybind.Button.Position = UDim2.new(1, -100, 0.5, -14)
				keybind.Button.Parent = keybind.Main

				local buttonCorner = Instance.new("UICorner")
				buttonCorner.CornerRadius = UDim.new(0, 8)
				buttonCorner.Parent = keybind.Button

				local buttonStroke = Instance.new("UIStroke")
				buttonStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
				buttonStroke.Color = self.Colors.Accent
				buttonStroke.Thickness = 1.5
				buttonStroke.Parent = keybind.Button

				local inputConnection
				local function toggleListening()
					if not keybind.Button then return end
					keybind.Listening = not keybind.Listening

					if keybind.Listening then
						keybind.Button.Text = "..."
						self:Tween(keybind.Button, {
							BackgroundColor3 = self.Colors.Accent,
							BackgroundTransparency = 0
						}, 0.2)

						inputConnection = UserInputService.InputBegan:Connect(function(input)
							if input.UserInputType == Enum.UserInputType.Keyboard then
								keybind.Value = input.KeyCode
								keybind.Button.Text = input.KeyCode.Name
								keybind.Listening = false

								self:Tween(keybind.Button, {
									BackgroundColor3 = self.Colors.Main,
									BackgroundTransparency = 0.2
								}, 0.2)

								if options.Callback then
									local success, err = pcall(function()
										options.Callback(input.KeyCode)
									end)
									if not success then
										warn("Keybind callback error: " .. tostring(err))
									end
								end

								if options.Flag then
									self.Flags[options.Flag] = input.KeyCode
								end

								if inputConnection then
									inputConnection:Disconnect()
								end
							end
						end)
					else
						if inputConnection then
							inputConnection:Disconnect()
						end
						keybind.Button.Text = keybind.Value.Name or "None"
						self:Tween(keybind.Button, {
							BackgroundColor3 = self.Colors.Main,
							BackgroundTransparency = 0.2
						}, 0.2)
					end
				end

				keybind.Button.MouseButton1Click:Connect(toggleListening)

				keybind.Main.AncestryChanged:Connect(function()
					if not keybind.Main:IsDescendantOf(game) then
						if inputConnection then
							inputConnection:Disconnect()
						end
					end
				end)

				if options.Flag then
					self.Flags[options.Flag] = keybind.Value
				end

				function keybind:SetKey(newKey)
					if not keybind.Button then return end
					keybind.Value = newKey
					keybind.Button.Text = newKey.Name or "None"

					if options.Callback then
						local success, err = pcall(function()
							options.Callback(newKey)
						end)
						if not success then
							warn("Keybind set key error: " .. tostring(err))
						end
					end

					if options.Flag then
						self.Flags[options.Flag] = newKey
					end
				end

				return keybind
			end

			function section:AddLabel(text)
				local label = Instance.new("TextLabel")
				label.Name = "Label"
				label.Text = text or "Label"
				label.Font = Enum.Font.GothamSemibold
				label.TextColor3 = self.Colors.Text
				label.TextSize = 15
				label.BackgroundTransparency = 1
				label.Size = UDim2.new(1, -20, 0, 25)
				label.Position = UDim2.new(0, 10, 0, 0)
				label.TextXAlignment = Enum.TextXAlignment.Left
				label.Parent = section.Content
				return label
			end

			return section
		end

		window.Tabs = window.Tabs or {}
		table.insert(window.Tabs, tab)

		if #window.Tabs == 1 and tab.Button and tab.Content then
			tab.Button.BackgroundColor3 = self.Colors.Accent
			tab.Button.BackgroundTransparency = 0
			local gradient = tab.Button:FindFirstChild("UIGradient")
			if gradient then
				gradient.Enabled = true
			end
			tab.Content.Visible = true
		end

		return tab
	end

	return window
end

-- Utility Functions
function LuxUI:Tween(instance, properties, duration, callback)
	if not instance then return end
	local tweenKey = tostring(instance)
	if self.ActiveTweens[tweenKey] then
		self.ActiveTweens[tweenKey]:Cancel()
		self.ActiveTweens[tweenKey] = nil
	end

	local tweenInfo = TweenInfo.new(
		duration or self.AnimationSpeed,
		animations.EasingStyles.Spring,
		animations.EasingDirections.Out
	)

	local tween = TweenService:Create(instance, tweenInfo, properties)
	self.ActiveTweens[tweenKey] = tween
	tween:Play()

	if callback then
		tween.Completed:Connect(function()
			self.ActiveTweens[tweenKey] = nil
			local success, err = pcall(callback)
			if not success then
				warn("Tween callback error: " .. tostring(err))
			end
		end)
	else
		tween.Completed:Connect(function()
			self.ActiveTweens[tweenKey] = nil
		end)
	end
	return tween
end

function LuxUI:MakeDraggable(frame, handle)
	if not (frame and handle) then return end
	handle = handle or frame
	local dragging
	local dragInput
	local dragStart
	local startPos

	local function update(input)
		local delta = input.Position - dragStart
		frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end

	handle.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = frame.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	handle.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)

	local dragConnection
	dragConnection = UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)

	frame.AncestryChanged:Connect(function()
		if not frame:IsDescendantOf(game) then
			if dragConnection then
				dragConnection:Disconnect()
			end
		end
	end)
end

function LuxUI:Notify(options)
	options = options or {}
	local notification = Instance.new("Frame")
	notification.Name = "Notification"
	notification.BackgroundColor3 = self.Colors.Main
	notification.BackgroundTransparency = 0.2
	notification.Size = UDim2.new(0, 320, 0, 0)
	notification.Position = UDim2.new(1, -340, 1, -20)
	notification.AnchorPoint = Vector2.new(1, 1)
	notification.Parent = self.NotificationHolder

	local shadow = Instance.new("ImageLabel")
	shadow.Name = "Shadow"
	shadow.Image = "rbxassetid://1316045217"
	shadow.ImageColor3 = self.Colors.Shadow
	shadow.ImageTransparency = 0.6
	shadow.BackgroundTransparency = 1
	shadow.Size = UDim2.new(1, 20, 1, 20)
	shadow.Position = UDim2.new(0, -10, 0, -10)
	shadow.ZIndex = -1
	shadow.Parent = notification

	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 8)
	corner.Parent = notification

	local stroke = Instance.new("UIStroke")
	stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	stroke.Color = self.Colors.Accent
	stroke.Thickness = 1.5
	stroke.Parent = notification

	local title = Instance.new("TextLabel")
	title.Name = "Title"
	title.Text = options.Title or "Notification"
	title.Font = Enum.Font.GothamBlack
	title.TextColor3 = self.Colors.Text
	title.TextSize = 18
	title.BackgroundTransparency = 1
	title.Size = UDim2.new(1, -25, 0, 25)
	title.Position = UDim2.new(0, 15, 0, 15)
	title.TextXAlignment = Enum.TextXAlignment.Left
	title.Parent = notification

	local content = Instance.new("TextLabel")
	content.Name = "Content"
	content.Text = options.Content or "This is a notification."
	content.Font = Enum.Font.GothamSemibold
	content.TextColor3 = self.Colors.TextDark
	content.TextSize = 15
	content.BackgroundTransparency = 1
	content.Size = UDim2.new(1, -25, 0, 0)
	content.Position = UDim2.new(0, 15, 0, 45)
	content.TextXAlignment = Enum.TextXAlignment.Left
	content.TextYAlignment = Enum.TextYAlignment.Top
	content.TextWrapped = true
	content.Parent = notification

	local textHeight = math.ceil(content.TextBounds.Y / 15) * 15
	content.Size = UDim2.new(1, -25, 0, textHeight)
	local totalHeight = 65 + textHeight
	notification.Size = UDim2.new(0, 320, 0, totalHeight)

	notification.Position = UDim2.new(1, -340, 1, totalHeight + 20)
	self:Tween(notification, {
		Position = UDim2.new(1, -340, 1, -20),
		BackgroundTransparency = 0.2
	}, 0.4)

	if options.Duration and options.Duration > 0 then
		task.delay(options.Duration, function()
			if notification then
				self:Tween(notification, {
					Position = UDim2.new(1, -340, 1, totalHeight + 20),
					BackgroundTransparency = 1
				}, 0.4, function()
					if notification then
						notification:Destroy()
					end
				end)
			end
		end)
	end

	local close = Instance.new("TextButton")
	close.Name = "Close"
	close.Text = "Ã—"
	close.Font = Enum.Font.GothamBold
	close.TextColor3 = self.Colors.Text
	close.TextSize = 16
	close.BackgroundTransparency = 1
	close.Size = UDim2.new(0, 25, 0, 25)
	close.Position = UDim2.new(1, -30, 0, 10)
	close.Parent = notification

	close.MouseButton1Click:Connect(function()
		if notification then
			self:Tween(notification, {
				Position = UDim2.new(1, -340, 1, totalHeight + 20),
				BackgroundTransparency = 1
			}, 0.4, function()
				if notification then
					notification:Destroy()
				end
			end)
		end
	end)

	return notification
end

function LuxUI:SaveConfiguration()
	if not self.ConfigurationSaving.Enabled then return end
	if not isfolder(self.ConfigurationSaving.FolderName) then
		makefolder(self.ConfigurationSaving.FolderName)
	end

	local data = {
		Flags = self.Flags,
		WindowPosition = self.MainWindow.Main.Position,
		Theme = self.Theme
	}

	local success, err = pcall(function()
		writefile(
			self.ConfigurationSaving.FolderName .. "/" .. self.ConfigurationSaving.FileName,
			HttpService:JSONEncode(data)
		)
	end)
	if not success then
		warn("Failed to save configuration: " .. tostring(err))
	end
end

function LuxUI:LoadConfiguration()
	if not self.ConfigurationSaving.Enabled then return end
	local filePath = self.ConfigurationSaving.FolderName .. "/" .. self.ConfigurationSaving.FileName

	if isfile(filePath) then
		local success, data = pcall(function()
			return HttpService:JSONDecode(readfile(filePath))
		end)

		if success and data then
			if data.Flags then
				for flag, value in pairs(data.Flags) do
					if self.Flags[flag] ~= nil then
						self.Flags[flag] = value
					end
				end
			end

			if data.WindowPosition then
				self.MainWindow.Main.Position = UDim2.new(
					data.WindowPosition.X.Scale,
					data.WindowPosition.X.Offset,
					data.WindowPosition.Y.Scale,
					data.WindowPosition.Y.Offset
				)
			end

			if data.Theme and themes[data.Theme] then
				self.Theme = data.Theme
				self.Colors = themes[data.Theme]
			end
		end
	end
end

function LuxUI:BindToKey(keyCode, callback)
	local connection
	local success, err = pcall(function()
		connection = UserInputService.InputBegan:Connect(function(input)
			if input.KeyCode == keyCode and not UserInputService:GetFocusedTextBox() then
				local success, err = pcall(callback)
				if not success then
					warn("Keybind callback error: " .. tostring(err))
				end
			end
		end)
	end)
	if not success then
		warn("Failed to bind key: " .. tostring(err))
	end
	return connection
end

function LuxUI:SetTheme(themeName)
	if themes[themeName] then
		self.Theme = themeName
		self.Colors = themes[themeName]
		local success, err = pcall(function()
			self:Notify({
				Title = "Theme Changed",
				Content = "Switched to " .. themeName .. " theme!",
				Duration = 3
			})
		end)
		if not success then
			warn("Failed to notify theme change: " .. tostring(err))
		end
	end
end

return LuxUI
